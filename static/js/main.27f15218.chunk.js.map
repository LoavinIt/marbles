{"version":3,"sources":["src/pages/RunList.js","src/pages/RunItem.js","App.js","serviceWorker.js","index.js"],"names":["RunList","props","createTask","bind","run","onClick","delete","key","text","this","listItems","entries","map","className","Component","RunItem","state","runs","addItem","deleteItem","e","_inputElement","value","newRun","Date","now","setState","prevState","concat","preventDefault","filteredRuns","filter","onSubmit","ref","a","placeholder","type","React","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gPAgCeA,E,YA5BX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,WAAa,EAAKA,WAAWC,KAAhB,gBAFH,E,wEAKRC,GAAM,IAAD,OACZ,OAAO,wBAAIC,QAAS,kBAAM,EAAKC,OAAOF,EAAIG,MAClCA,IAAKH,EAAIG,KAAMH,EAAII,Q,6BAGxBD,GACHE,KAAKR,MAAMK,OAAOC,K,+BAIlB,IACIG,EADcD,KAAKR,MAAMU,QACDC,IAAIH,KAAKP,YAErC,OACI,6BACA,wBAAIW,UAAU,WACTH,Q,GAvBKI,aCCTC,EAAb,YACE,WAAYd,GAAO,IAAD,8BAChB,4CAAMA,KACCe,MAAQ,CACXC,KAAM,IAEV,EAAKC,QAAQ,EAAKA,QAAQf,KAAb,gBACb,EAAKgB,WAAa,EAAKA,WAAWhB,KAAhB,gBANF,EADpB,qEAUUiB,GACN,GAAiC,KAA7BX,KAAKY,cAAcC,MAAc,CACnC,IAAIC,EAAS,CACXf,KAAMC,KAAKY,cAAcC,MACzBf,IAAKiB,KAAKC,OAEZhB,KAAKiB,UAAS,SAACC,GACb,MAAO,CACLV,KAAMU,EAAUV,KAAKW,OAAOL,OAIlCd,KAAKY,cAAcC,MAAQ,GAC3BF,EAAES,mBAvBN,iCA0BatB,GACT,IAAIuB,EAAerB,KAAKO,MAAMC,KAAKc,QAAO,SAAS3B,GACjD,OAAQA,EAAIG,MAAQA,KAEtBE,KAAKiB,SAAS,CACZT,KAAMa,MA/BZ,+BAmCY,IAAD,OACL,OACE,yBAAKjB,UAAU,aACb,uCACA,0BAAMmB,SAAUvB,KAAKS,SACnB,2BAAOe,IAAK,SAACC,GAAD,OAAO,EAAKb,cAAgBa,GACtCC,YAAY,uBACd,4BAAQC,KAAK,UAAb,QAEF,kBAAC,EAAD,CACEzB,QAASF,KAAKO,MAAMC,KACpBX,OAAQG,KAAKU,kBA9CzB,GAA6BkB,IAAMvB,WCSpBwB,MARf,WACE,OACE,yBAAKzB,UAAU,aACX,kBAAC,EAAD,QCKY0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.27f15218.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass RunList extends Component {\n\n    constructor(props) {\n        super(props);\n        this.createTask = this.createTask.bind(this);\n    }\n\n    createTask(run) {\n        return <li onClick={() => this.delete(run.key)}\n                key={run.key}>{run.text}</li> \n    }\n\n    delete(key) {\n        this.props.delete(key);\n    }\n\n    render() { \n        var todoEntries = this.props.entries;\n        var listItems = todoEntries.map(this.createTask);\n\n        return (\n            <div>\n            <ul className=\"theList\">\n                {listItems}\n            </ul>\n            </div>\n      );\n    }\n}\n\nexport default RunList;","import React from 'react';\nimport RunList from './RunList';\n\nexport class RunItem extends React.Component {\n  constructor(props){\n    super(props);\n      this.state = {\n        runs: []\n      };\n    this.addItem=this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n  }\n\n  addItem(e) {\n    if (this._inputElement.value !== \"\") {\n      var newRun = {\n        text: this._inputElement.value,\n        key: Date.now()\n      };\n      this.setState((prevState) => {\n        return {\n          runs: prevState.runs.concat(newRun)\n        };\n      });\n    }\n    this._inputElement.value = \"\";\n    e.preventDefault();\n  }\n\n  deleteItem(key) {\n    var filteredRuns = this.state.runs.filter(function(run) {\n      return (run.key !== key)\n    })\n    this.setState({\n      runs: filteredRuns\n    })\n  }\n  \n  render() { \n      return (\n        <div className=\"run-entry\">\n          <h2>Add Run</h2>\n          <form onSubmit={this.addItem}>\n            <input ref={(a) => this._inputElement = a}\n              placeholder=\"enter run distance\" />\n            <button type=\"submit\">Add</button>\n          </form>\n          <RunList \n            entries={this.state.runs} \n            delete={this.deleteItem}\n          />\n        </div>\n      );\n    }\n  }\n\nexport default RunItem;","import React from 'react';\nimport './App.scss';\nimport { RunItem } from './src/pages/RunItem'\n\nfunction App() {\n  return (\n    <div className=\"page-wrap\">\n        <RunItem  />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}